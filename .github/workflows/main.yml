# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Install python according to version specified in matrix
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    # Runs a set of commands using the runners shell
    - name: Install tox
      run: pip install tox

    - name: Run tox (flake8, mypy, tests and cove coverage)
      run: |
        echo "Just showing off the multi command option, next command will run tox."
        tox

    # Generate an artifact from this build
    - name: Upload code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: coverage-result-${{ matrix.python-version }}
        path: htmlcov/

    - uses: dorny/paths-filter@v2.2.1
        id: filter
        with:
          # inline YAML or path to separate file (e.g.: .github/filters.yaml)
          filters: |
            main_init:
              - 'example/__init__.py'

          # run only if 'backend' files were changed
          - name: sdist
            if: steps.filter.outputs.main_init == 'true' and github.event_name == 'push'
            run: python setup.py sdist

          - name: publish
            if: steps.filter.outputs.main_init == 'true' and github.event_name == 'push'
            uses: pypa/gh-action-pypi-publish@master
              with:
                user: __token__
                password: ${{ secrets.PYPI_UPLOAD_API_KEY }}
